#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <algorithm>
#include <cctype>
#include <locale> // –¥–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ª–æ–∫–∞–ª–∏

class TextFileProcessor {
    std::string filename;
    std::string content;

public:
    TextFileProcessor(const std::string& fname) : filename(fname) {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8
        std::ifstream file(filename);
        file.imbue(std::locale("ru_RU.UTF-8")); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä—É—Å—Å–∫—É—é –ª–æ–∫–∞–ª—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8
        if (file) {
            std::ostringstream ss;
            ss << file.rdbuf();
            content = ss.str();
        }
    }

    // –ü–æ–∏—Å–∫ —Å–ª–æ–≤–∞ –≤ —Ç–µ–∫—Å—Ç–µ, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–∂–¥–µ–Ω–∏–π
    int find_word(const std::string& word) const {
        int count = 0;
        std::istringstream iss(content);
        std::string w;
        while (iss >> w) {
            if (w == word) ++count;
        }
        return count;
    }

    // –ü–æ–¥—Å—á–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
    int word_count() const {
        int count = 0;
        std::istringstream iss(content);
        std::string w;
        while (iss >> w) ++count;
        return count;
    }

    // –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–≤ —Å–∏–º–≤–æ–ª–∞—Ö)
    size_t size() const {
        return content.size();
    }

    // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ñ–∞–π–ª –±–µ–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è)
    void remove_chars_and_save(const std::string& chars_to_remove, const std::string& new_filename) const {
        std::string new_content = content;
        for (char ch : chars_to_remove) {
            new_content.erase(std::remove(new_content.begin(), new_content.end(), ch), new_content.end());
        }
        std::ofstream out(new_filename);
        out.imbue(std::locale("ru_RU.UTF-8")); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å –¥–ª—è –≤—ã–≤–æ–¥–∞
        out << new_content;
    }

    // –°–æ–∑–¥–∞—Ç—å –≤–µ–∫—Ç–æ—Ä —Ç–æ–∫–µ–Ω–æ–≤ (—Å–ª–æ–≤) –∏–∑ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    std::vector<std::string> get_tokens_from_file(const std::string& cleaned_filename) const {
        std::vector<std::string> tokens;
        std::ifstream file(cleaned_filename);
        file.imbue(std::locale("ru_RU.UTF-8")); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å –¥–ª—è —á—Ç–µ–Ω–∏—è
        if (!file) {
            std::cerr << "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: " << cleaned_filename << std::endl;
            return tokens;
        }
        std::string word;
        while (file >> word) {
            tokens.push_back(word);
        }
        return tokens;
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω—ã –≤ —Ñ–∞–π–ª
    void save_tokens_to_file(const std::vector<std::string>& tokens, const std::string& filename) const {
        std::ofstream out(filename);
        out.imbue(std::locale("ru_RU.UTF-8")); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å –¥–ª—è –≤—ã–≤–æ–¥–∞
        if (!out) {
            std::cerr << "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª –¥–ª—è –∑–∞–ø–∏—Å–∏: " << filename << std::endl;
            return;
        }
        for (const auto& token : tokens) {
            out << token << std::endl;
        }
    }
};

// –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

int main() {
    std::string user_filename;
    std::cout << "–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (Enter –¥–ª—è input.txt): ";
    std::getline(std::cin, user_filename);
    std::string command;

    if (user_filename.empty()) {
        user_filename = "input.txt";
    }
    TextFileProcessor tfp(user_filename);

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    std::vector<std::string> tokens = tfp.get_tokens_from_file("output.txt");

    while (true) {
        std::cout << "\n–ë–æ—Ç: –ö–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å? (–≤–≤–µ–¥–∏—Ç–µ \"–ø–æ–º–æ—â—å\" –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥)" << std::endl;
        std::cout << "–ë–æ—Ç: –í–≤–æ–¥–∏ –∫–æ–º–∞–Ω–¥—É (–∏–ª–∏ \"–≤—ã—Ö–æ–¥\" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ";
        std::cout << "\n–¢—ã: ";
        std::getline(std::cin, command);

        if (command == "search"  || command == "find") {
            std::cout << "–ë–æ—Ç: Enter word for search!";
            std::string find_word;
            std::getline(std::cin, find_word);
            std::cout << "–°–ª–æ–≤–æ "<< find_word << " –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è: " << tfp.find_word(find_word) << " —Ä–∞–∑(–∞)\n";

        } else if (command == "count") {
            std::cout << "Number of tokens in file: " << tfp.word_count() << std::endl;
        
        } else if (command == "size") {
            std::cout << "–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: " << tfp.size() << " —Å–∏–º–≤–æ–ª–æ–≤\n";
        
        } else if (command == "remove") {
            std::cout << "–ë–æ—Ç: Enter chars for remove!";
            std::string chars_to_remove;
            std::getline(std::cin, chars_to_remove);
            tfp.remove_chars_and_save(chars_to_remove, "output.txt");
            std::cout << "–£–¥–∞–ª–µ–Ω—ã —Å–∏–º–≤–æ–ª—ã: " << chars_to_remove << "\n";
        
        } else if (command == "tokens") {
            std::cout << "–¢–æ–∫–µ–Ω—ã –∏–∑ output.txt:\n";
            for (const auto& token : tokens) {
                std::cout << token <<  "";
            }
            std::cout << std::endl;

        } else if (command == "save") {
            tfp.save_tokens_to_file(tokens, "tokens.txt");
            std::cout << "–¢–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª tokens.txt\n";

        } else if (command == "–ø–æ–º–æ—â—å" || command == "help") {
            std::cout << "–ë–æ—Ç: –í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \"search\", \"count\", \"size\", \"remove\", \"tokens\", \"save\", \"–≤—ã—Ö–æ–¥\".";
        } else if (command == "–≤—ã—Ö–æ–¥" || command == "exit" || command == "quit" || command == "q") {
            std::cout << "–ü–æ–∫–∞! üëã" << std::endl;
            break;
        }
    }

    // tfp.remove_chars_and_save("¬´¬ª\"'`,.!?;:‚Äî()-[]{}<>", "output.txt");
    tfp.remove_chars_and_save(",.!?-()-", "output.txt");

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
    std::cout << "–¢–æ–∫–µ–Ω—ã –∏–∑ output.txt:\n";
    for (const auto& token : tokens) {
        std::cout << token <<  " ";
    }
    std::cout << std::endl;
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω—ã –≤ —Ñ–∞–π–ª tokens.txt
    tfp.save_tokens_to_file(tokens, "tokens.txt");

    return 0;
}
