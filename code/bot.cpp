#include <iostream>
#include <string>
#include <chrono>
#include <ctime>
#include <iomanip>
#include <sstream>
#include <vector>
#include <algorithm>

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –¥–∞—Ç—ã
void print_current_time(const std::string& name) {
    auto now = std::chrono::system_clock::now();
    std::time_t now_time = std::chrono::system_clock::to_time_t(now);
    std::cout << "–ë–æ—Ç:" << name << ", –°–µ–π—á–∞—Å " 
              << std::put_time(std::localtime(&now_time), "%Y-%m-%d %H:%M:%S")
              << std::endl;
}
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
void sort_list1() {
    std::cout << "–ë–æ—Ç: –í–≤–µ–¥–∏ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"321, 654, 987\"): ";
    std::string list;
    std::getline(std::cin, list);
    std::sort(list.begin(), list.end());
    std::cout << "–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: " << list << std::endl;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —á–∏—Å–µ–ª
void sort_list() {
    std::cout << "–ë–æ—Ç: –í–≤–µ–¥–∏ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, \"321, 654, 987\"): ";
    std::string list;
    std::getline(std::cin, list);

    // –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–∞
    std::vector<int> numbers;
    std::stringstream ss(list);
    std::string item;
    while (std::getline(ss, item, ',')) {
        // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
        item.erase(std::remove_if(item.begin(), item.end(), ::isspace), item.end());
        if (!item.empty()) {
            try {
                numbers.push_back(std::stoi(item));
            } catch (...) {
                std::cout << "–ë–æ—Ç: \"" << item << "\" –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º –∏ –±—É–¥–µ—Ç –ø—Ä–æ–ø—É—â–µ–Ω–æ.\n";
            }
        }
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–∞
    std::sort(numbers.begin(), numbers.end());

    // –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    std::cout << "–û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫: ";
    for (size_t i = 0; i < numbers.size(); ++i) {
        std::cout << numbers[i] << "";
        if (i != numbers.size() - 1) std::cout << ", ";
    }
    std::cout << std::endl;
}

// –í—ã–Ω–µ—Å–µ–º –ª–æ–≥–∏–∫—É –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
void run_bot() {
    std::string command;

    
    std::cout << "–ë–æ—Ç: –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç? ";
    std::string name;
    std::getline(std::cin, name);
    std::cout << "–ë–æ—Ç: –ü—Ä–∏–≤–µ—Ç, " << name << "! –Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å." << std::endl;

    while (true) {
        std::cout << "\n–ë–æ—Ç: –ö–∞–∫—É—é –∫–æ–º–∞–Ω–¥—É —Ç—ã —Ö–æ—á–µ—à—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å? (–≤–≤–µ–¥–∏—Ç–µ \"–ø–æ–º–æ—â—å\" –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥)" << std::endl;
        std::cout << "–ë–æ—Ç: –í–≤–æ–¥–∏ –∫–æ–º–∞–Ω–¥—É (–∏–ª–∏ \"–≤—ã—Ö–æ–¥\" –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ";
        std::cout << "\n–¢—ã: ";
        std::getline(std::cin, command);

        if (command == "–ø—Ä–∏–≤–µ—Ç") {
            std::cout << "–ë–æ—Ç: –ü—Ä–∏–≤–µ—Ç! –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å!";
        } else if (command == "–≤—Ä–µ–º—è" || command == "time") {
            print_current_time(name);
        } else if (command == "–ø–æ–º–æ—â—å" || command == "help") {
            std::cout << "–ë–æ—Ç: –í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \"–ø—Ä–∏–≤–µ—Ç\", \"–≤—Ä–µ–º—è\", \"–ø–æ–º–æ—â—å\", \"–≤—ã—Ö–æ–¥\".";
        } else if (command == "—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å" || command == "sort") {
            sort_list();
        } else if (command == "–≤—ã—Ö–æ–¥" || command == "exit" || command == "quit" || command == "q") {
            std::cout << "–ë–æ—Ç: –ü–æ–∫–∞! üëã" << std::endl;
            break;
        } else {
            std::cout << "–ë–æ—Ç: –Ø –Ω–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞." << std::endl
                      << "–í–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:" << std::endl
                      << "  - –ø—Ä–∏–≤–µ—Ç" << std::endl
                      << "  - –≤—Ä–µ–º—è" << std::endl
                      << "  - –ø–æ–º–æ—â—å" << std::endl
                      << "  - –≤—ã—Ö–æ–¥" << std::endl;
        }
    }
}

int main() {
    run_bot();
    return 0;
}
